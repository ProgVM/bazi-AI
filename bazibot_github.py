import os
import json
import time
import random
import telebot
import shutil
import subprocess
from telebot.apihelper import ApiTelegramException
import threading
from threading import Timer
from gtts import gTTS
from googletrans import Translator # –ù—É–∂–Ω–∞ –≤–µ—Ä—Å–∏—è 4.0.0-rc1
import pretty_midi
import pymorphy2
from PIL import Image

BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∫–æ–¥–æ–º

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π —á–∞—Ç–æ–≤ –∏ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
DATA_DIR = 'chats'
BACKUP_DIR = 'backup_chats'
SOURCE_DIR = 'src'

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
os.makedirs(DATA_DIR, exist_ok=True)
os.makedirs(BACKUP_DIR, exist_ok=True)
os.makedirs(SOURCE_DIR, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞
translator = Translator()

# –°–ø–∏—Å–æ–∫ —Ä–µ–∞–∫—Ü–∏–π (—ç–º–æ–¥–∑–∏)
reactions = [
    "üëç", "üëé", "‚ù§Ô∏è", "üî•", "ü•∞", "üëè", "üòÅ", "ü§î", "ü§Ø", "üò±",
    "ü§¨", "üò¢", "üéâ", "ü§©", "ü§Æ", "üí©", "üôè", "üëå", "üïä", "ü§°",
    "ü•±", "ü•¥", "üòç", "üê≥", "‚ù§Ô∏è", "üî•", "üåö", "üå≠", "üíØ", "ü§£",
    "‚ö°Ô∏è", "üçå", "üèÜ", "üíî", "ü§®", "üòê", "üçì", "üçæ", "üíã", "üñï",
    "üòà", "üò¥", "üò≠", "ü§ì", "üëª", "üë®", "üëÄ", "üéÉ", "üôà", "üòá",
    "üò®", "ü§ù", "‚úç", "ü§ó", "ü´°", "üéÖ", "üéÑ", "‚òÉÔ∏è", "üíÖ", "ü§™",
    "üóø", "üÜí", "üíò", "üôâ", "ü¶Ñ", "üòò", "üíä", "üôä", "üòé", "üëæ",
    "ü§∑", "üò°", "–°–û–°–ê–õ?"
]

# –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —ç–º–æ–¥–∑–∏
text_emojis = [":)", ":_)", ";)", ";_)", ":(", ":_(", ";(", ";_(", "=)", "=_)", "=( ", "=_(", ":1", "=1", ":3", "3:", "=3", "3=", ":D", "D:", ";D", "D;", "=D", "D=", ":0", "=0", "XD", "xd", ":c", "=c", ":o", "=o", ":>", ":<", "=>", "=<", "8)", "8(", "8o", ":/", ";/", "=/", "0_0", "-_-", "-_,-", "~_~", "~-~", "T_T", "U_U", "^_^", "^-^", "X)", "X(", "x)", "x(", "0w0", "UwU", "-w-", "%)", "$_$", ":]", ":[", "=]", "=[", "0~0", "-~-", ">:)", "<:)", ">:(", "<:(", ">;)", "<;)", ">;(", "<;(", ">=)", "<=)", ">=(", "<=(", ">:D", "<:D", "D:<", "D:>", ">;D", "<;D", "D;<", "D;>", ">=D", "<=D", "D=<", "D=>", ">:3", "<:3", "3:<", "3:>", ">=3", "<=3", "3=<", "3=>", ">:0", "<:0", ">=0", "<=0", ">:>", "<:>", ">:<", "<:<", ">=>", "<=>", ">=<", "<=<", ">:]", "<:]", ">:[", "<:[", ">;]", "<;]", ">;[", "<;[", ">=]", "<=]", "]=[", "<=[", "}:)", "{:)", "}:(", "{:(", "};)", "{;)", "};(", "{;(", "}=)", "{=)", "}=(", "{=(", "}:D", "{:D", "D:{", "D:}", "};D", "{;D", "D;{", "D;}", "}=D", "{=D", "D={", "D=}", "}:3", "{:3", "3:{", "3:}", "}=3", "{=3", "3={", "3=}", "}:0", "{:0", "}=0", "{=0", "}:>", "{:>", "}:<", "{:<", "}=>", "{=>", "}=<", "{=<", "}:]", "{:]", "}:[", "{:[", "};]", "{;]", "};[", "{;[", "}=]", "{=]", "}=[", "{=[", ":&", ";&", "=&", ":?", ";?", "=?" , "'_'", "'-'", "( ‚Äå¬∞ ‚Äå ñ ‚Äå¬∞)", "(‚óï‚Äø‚óï‚úø)"]


morph = pymorphy2.MorphAnalyzer()

adjectives = ["–∫—Ä–∞—Å–∏–≤—ã–π", "–±–æ–ª—å—à–æ–π", "–º–∞–ª–µ–Ω—å–∫–∏–π", "—É–º–Ω—ã–π", "–¥–æ–±—Ä—ã–π", "—Å–∏–ª—å–Ω—ã–π", "–±—ã—Å—Ç—Ä—ã–π", "–º–µ–¥–ª–µ–Ω–Ω—ã–π", "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π", "—Å–∫—É—á–Ω—ã–π"]
verbs = ["–±–µ–≥–∞–µ—Ç", "–ø—Ä—ã–≥–∞–µ—Ç", "–ª–µ—Ç–∞–µ—Ç", "—Å–ø–∏—Ç", "–µ—Å—Ç", "—á–∏—Ç–∞–µ—Ç", "–ø–∏—à–µ—Ç", "—Ä–∞–±–æ—Ç–∞–µ—Ç", "–∏–≥—Ä–∞–µ—Ç", "–º–µ—á—Ç–∞–µ—Ç"]

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∏—Ö –Ω–æ–º–µ—Ä–∞)
INSTRUMENTS = {
    "–ø–∏–∞–Ω–∏–Ω–æ" or "—Ñ–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ": 0,
    "–≥–∏—Ç–∞—Ä–∞": 24,
    "–≤–∏–±—Ä–∞—Ñ–æ–Ω": 11,
    "—Å–∞–∫—Å–æ—Ñ–æ–Ω": 65,
    "—Ç—Ä—É–±–∞": 56,
    "—Å–∫—Ä–∏–ø–∫–∞": 40,
    "—Ñ–ª–µ–π—Ç–∞": 73,
    "—É–¥–∞—Ä–Ω—ã–µ": 118,
    "–æ—Ä–≥–∞–Ω": 19,
    "—Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä": 90,
}

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
TOKEN = "—Ç–æ–∫–µ–Ω –∫—Ä—É—Ç–æ–π"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(TOKEN)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
def log(message):
    print(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {message}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è –∏–∑ —Ñ–∞–π–ª–∞
def load_chat_data(chat_id):
    chat_dir = os.path.join(DATA_DIR, str(chat_id))
    os.makedirs(chat_dir, exist_ok=True)
    file_path = os.path.join(chat_dir, 'data.json')
    settings_path = os.path.join(chat_dir, 'settings.json')
    timers_path = os.path.join(chat_dir, 'timers.json')  # –ü—É—Ç—å –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
    stickers_dir = os.path.join(chat_dir, 'stickers')  # –ü–∞–ø–∫–∞ –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å—Ç–∏–∫–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    os.makedirs(stickers_dir, exist_ok=True)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(settings_path):
        settings = {
            "activity": 5,
            "voice": "ru",
            "restart_count": 0,
            "language": "en",  # –£—Å—Ç–∞–Ω–æ–≤–∏–º —è–∑—ã–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            "auto_translate": False  # –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
        with open(settings_path, 'w', encoding='utf-8') as f:
            json.dump(settings, f, ensure_ascii=False, indent=4)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö
    if os.path.exists(file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
                if 'last_message_sent' not in data:
                    data['last_message_sent'] = 0
                # –û–±–Ω–æ–≤–ª—è–µ–º title –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —á–∞—Ç–∞
                chat_info = bot.get_chat(chat_id)
                data['title'] = chat_info.title
                return data
        except (json.JSONDecodeError, UnicodeDecodeError):
            log(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ —Ñ–∞–π–ª–µ {file_path}. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏.")
            backup_chat_dir = os.path.join(BACKUP_DIR, str(chat_id))
            backup_file_path = os.path.join(backup_chat_dir, 'data.json')
            if os.path.exists(backup_file_path):
                shutil.copy(backup_file_path, file_path)  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
                log(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –¥–ª—è —á–∞—Ç–∞ {chat_id}.")
                return load_chat_data(chat_id)  # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            else:
                log(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
                with open(file_path, 'w', encoding='utf-8') as f:
                    json.dump({'messages': [], 'last_active': time.time(), 'active_count': 0, 'last_message_sent': 0, 'chat_id': chat_id, 'title': f"ID{chat_id}"}, f, ensure_ascii=False, indent=4)
                return load_chat_data(chat_id)
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        chat_info = bot.get_chat(chat_id)
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump({'messages': [], 'last_active': time.time(), 'active_count': 0, 'last_message_sent': 0, 'chat_id': chat_id, 'title': chat_info.title}, f, ensure_ascii=False, indent=4)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(timers_path):
        with open(timers_path, 'w', encoding='utf-8') as f:
            json.dump([], f)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º–µ—Ä–æ–≤

    return {'messages': [], 'last_active': time.time(), 'active_count': 0, 'last_message_sent': 0, 'chat_id': chat_id, 'title': chat_info.title}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è –≤ —Ñ–∞–π–ª
def save_chat_data(chat_id, data):
    chat_dir = os.path.join(DATA_DIR, str(chat_id))
    os.makedirs(chat_dir, exist_ok=True)
    file_path = os.path.join(chat_dir, 'data.json')

    backup_chat_dir = os.path.join(BACKUP_DIR, str(chat_id))
    if os.path.exists(chat_dir):
        shutil.copytree(chat_dir, backup_chat_dir, dirs_exist_ok=True)

    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except IOError as e:
        log(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª {file_path}: {e}")
        if os.path.exists(backup_chat_dir):
            shutil.rmtree(chat_dir)
            shutil.copytree(backup_chat_dir, chat_dir)
            log(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –¥–ª—è —á–∞—Ç–∞ {chat_id}.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['photo', 'audio', 'video', 'document'])
def handle_media(message):
    chat_id = message.chat.id
    chat_dir = os.path.join(DATA_DIR, str(chat_id), 'media')
    os.makedirs(chat_dir, exist_ok=True)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
    if message.content_type == 'document':
        file_info = bot.get_file(message.document.file_id)
        file_size = message.document.file_size
        file_name = message.document.file_name
    else:
        file_info = bot.get_file(message.photo[-1].file_id)
        file_size = message.photo[-1].file_size
        file_name = file_info.file_path.split('/')[-1]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    if file_size > 50 * 1024 * 1024:  # 20 –ú–ë
        bot.reply_to(message, "–Ø —Ö–æ—Ç–µ–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –º–µ–¥–∏–∞, –Ω–æ –º–Ω–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–µ—Ç–∏–ª —Å–∫–∞—á–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã —Ä–∞–∑–º–µ—Ä–æ–º –±–æ–ª—å—à–µ 20 –ú–ë.")
        return

    downloaded_file = bot.download_file(file_info.file_path)
    with open(os.path.join(chat_dir, file_name), 'wb') as new_file:
        new_file.write(downloaded_file)

    log(f"–§–∞–π–ª {file_name} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ —á–∞—Ç {chat_id}.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤
def generate_response(chat_data):
    if not chat_data['messages']:
        return "–Ø –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Ç—É–ø–æ–π (–í–∞—à IQ √ó –º–æ–π IQ = 0, –±–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ), —á—Ç–æ —è –Ω–µ –º–æ–≥—É –Ω–∏—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å."

    words = []
    for message in chat_data['messages']:
        words.extend(message.split())

    if not words:
        return "–Ø –Ω–∞—Å—Ç–æ–ª—å–∫–æ —Ç—É–ø–æ–π (–í–∞—à IQ √ó –º–æ–π IQ = 0, –±–ª–∞–≥–æ–¥–∞—Ä—è –º–Ω–µ), —á—Ç–æ —è –Ω–µ –º–æ–≥—É –Ω–∏—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å."

    if random.random() < 0.1:  # 10% —à–∞–Ω—Å –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–º–æ–¥–∑–∏
        words.append(random.choice(text_emojis))

    response_length = random.randint(1, 15)
    response = ' '.join(random.choice(words) for _ in range(response_length))
    return response

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def generate_voice_message(text, chat_id):
    chat_dir = os.path.join(DATA_DIR, str(chat_id), 'voice')
    os.makedirs(chat_dir, exist_ok=True)

    output_file = os.path.join(chat_dir, f"voice_message_{int(time.time())}.ogg")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
    settings_path = os.path.join(DATA_DIR, str(chat_id), 'settings.json')
    if os.path.exists(settings_path):
        with open(settings_path, 'r') as f:
            settings = json.load(f)
            voice = settings.get('voice', 'ru')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º 'ru'

    try:
        tts = gTTS(text=text, lang=voice)
        tts.save(output_file)
    except ValueError as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–∞: {e}")
        return None  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è

    return output_file

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∏–∫–µ—Ä–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
def save_user_sticker(chat_id, sticker_id):
    stickers_file = os.path.join(DATA_DIR, str(chat_id), 'stickers.json')
    stickers_dir = os.path.join(DATA_DIR, str(chat_id), 'stickers')
    os.makedirs(stickers_dir, exist_ok=True)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–∫–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ .webp
    file_info = bot.get_file(sticker_id)
    sticker_path = os.path.join(stickers_dir, f"{sticker_id}.webp")
    downloaded_file = bot.download_file(file_info.file_path)

    with open(sticker_path, 'wb') as f:
        f.write(downloaded_file)

    if os.path.exists(stickers_file):
        with open(stickers_file, 'r', encoding='utf-8') as f:
            stickers = json.load(f)
    else:
        stickers = []

    if sticker_id not in stickers:
        stickers.append(sticker_id)

    with open(stickers_file, 'w', encoding='utf-8') as f:
        json.dump(stickers, f, ensure_ascii=False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞
def load_timers(chat_id):
    timers_file = os.path.join(DATA_DIR, str(chat_id), 'timers.json')
    if os.path.exists(timers_file):
        with open(timers_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª
def save_timers(chat_id, timers):
    timers_file = os.path.join(DATA_DIR, str(chat_id), 'timers.json')
    with open(timers_file, 'w', encoding='utf-8') as f:
        json.dump(timers, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
def timer_thread(chat_id, duration, command, user_id):
    time.sleep(duration)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞
    bot.send_message(chat_id, f"–¢–∞–π–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É: {command}")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
    commands = command.splitlines()  # –†–∞–∑–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ —Å—Ç—Ä–æ–∫–∞–º
    for cmd in commands:
        if cmd.startswith('/'):
            if cmd.startswith('/genv '):
                user_input = cmd[len('/genv '):].strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
                if not user_input:  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    user_input = generate_response({'messages': []})  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                voice_file = generate_voice_message(user_input, chat_id)
                if voice_file is not None:
                    with open(voice_file, 'rb') as f:
                        bot.send_voice(chat_id, f)
                else:
                    bot.send_message(chat_id, "–£–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫ –Ω–µ –¥—Ä—É–∂–∏—Ç —Å TTS. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —è–∑—ã–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä /voice ru.")
            elif cmd.startswith('/gent '):
                user_input = cmd[len('/gent '):].strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
                if not user_input:  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    user_input = generate_response({'messages': []})  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                response = generate_response({'messages': [user_input]})
                bot.send_message(chat_id, response)
            elif cmd.startswith('/genm '):
                user_input = cmd[len('/genm '):].strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
                media_files = os.listdir(os.path.join(DATA_DIR, str(chat_id), 'media'))
                if media_files:
                    selected_files = random.sample(media_files, min(len(media_files), 3))  # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 3 –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
                    for media_file in selected_files:
                        media_path = os.path.join(DATA_DIR, str(chat_id), 'media', media_file)
                        caption = generate_response({'messages': [user_input]}) if user_input else generate_response({'messages': []})  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
                        if media_file.endswith(('.jpg', '.png')):
                            with open(media_path, 'rb') as f:
                                bot.send_photo(chat_id, f, caption=caption)
                        elif media_file.endswith(('.mp4', '.avi')):
                            with open(media_path, 'rb') as f:
                                bot.send_video(chat_id, f, caption=caption)
                        elif media_file.endswith(('.ogg', '.mp3')):
                            with open(media_path, 'rb') as f:
                                bot.send_audio(chat_id, f, caption=caption)
                        else:
                            with open(media_path, 'rb') as f:
                                bot.send_document(chat_id, f, caption=caption)
                else:
                    bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏, –Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –ø–∞–ø–∫–µ —á–∞—Ç–∞ –≤ –º–æ–µ–π —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –º–µ–¥–∏–∞.")

    # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    timers = load_timers(chat_id)
    timers = [timer for timer in timers if timer['command'] != command]  # –£–¥–∞–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π —Ç–∞–π–º–µ—Ä
    save_timers(chat_id, timers)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º–µ—Ä–æ–≤

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞
@bot.message_handler(commands=['timer'])
def set_timer(message):
    chat_id = message.chat.id
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lines = message.text.splitlines()

    if len(lines) < 2:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–∞–π–º–µ—Ä –∏ –∫–æ–º–∞–Ω–¥—É –Ω–∞ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫–∞—Ö.")
        return

    timer_string = lines[0].strip()
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—è —Å–æ –≤—Ç–æ—Ä–æ–π, –≤ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É
    command = '\n'.join(lines[1:]).strip()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞–π–º–µ—Ä—ã
    timers = load_timers(chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–∞–π–º–µ—Ä–æ–≤
    if len(timers) >= 25:
        bot.send_message(chat_id, "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 25 —Ç–∞–π–º–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –Ω–∏—Ö.")
        return

    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É —Ç–∞–π–º–µ—Ä–∞
    time_components = {
        'years': 0,
        'months': 0,
        'days': 0,
        'hours': 0,
        'minutes': 0,
        'seconds': 0
    }

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    for part in timer_string.split():
        if part.endswith('y'):
            time_components['years'] = int(part[:-1])
        elif part.endswith('m'):
            time_components['months'] = int(part[:-1])
        elif part.endswith('d'):
            time_components['days'] = int(part[:-1])
        elif part.endswith('h'):
            time_components['hours'] = int(part[:-1])
        elif part.endswith('min'):
            time_components['minutes'] = int(part[:-3])
        elif part.endswith('s'):
            time_components['seconds'] = int(part[:-1])

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –≤ —Å–µ–∫—É–Ω–¥—ã
    total_seconds = (time_components['years'] * 365 * 24 * 3600 +
                     time_components['months'] * 30 * 24 * 3600 +
                     time_components['days'] * 24 * 3600 +
                     time_components['hours'] * 3600 +
                     time_components['minutes'] * 60 +
                     time_components['seconds'])

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫
    timers.append({'duration': total_seconds, 'command': command, 'user_id': user_id})

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
    save_timers(chat_id, timers)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
    threading.Thread(target=timer_thread, args=(chat_id, total_seconds, command, user_id)).start()
    bot.send_message(chat_id, f"–¢–∞–π–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {total_seconds} —Å–µ–∫—É–Ω–¥. –ö–æ–º–∞–Ω–¥–∞: {command}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞
@bot.message_handler(commands=['stoptimer'])
def stop_timer(message):
    chat_id = message.chat.id
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    admins = bot.get_chat_administrators(chat_id)
    admin_ids = [admin.user.id for admin in admins]
    if user_id not in admin_ids:
        bot.send_message(chat_id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–∞–π–º–µ—Ä–∞
    try:
        timer_number = int(message.text.split()[1]) - 1  # –ù–æ–º–µ—Ä–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
    except (IndexError, ValueError):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ç–∞–π–º–µ—Ä—ã
    timers = load_timers(chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–π–º–µ—Ä
    if 0 <= timer_number < len(timers):
        del timers[timer_number]  # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
        save_timers(chat_id, timers)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∞–π–º–µ—Ä–æ–≤
        bot.send_message(chat_id, f"–¢–∞–π–º–µ—Ä –Ω–æ–º–µ—Ä {timer_number + 1} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        bot.send_message(chat_id, "–¢–∞–∫–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
@bot.message_handler(commands=['timers'])
def show_timers(message):
    chat_id = message.chat.id
    timers = load_timers(chat_id)

    if not timers:
        bot.send_message(chat_id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤.")
        return

    response = "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã:\n"
    for i, timer in enumerate(timers, start=1):
        duration = timer['duration']
        command = timer['command']
        response += f"{i}. –¢–∞–π–º–µ—Ä –Ω–∞ {duration} —Å–µ–∫—É–Ω–¥. –ö–æ–º–∞–Ω–¥–∞: {command}\n"

    bot.send_message(chat_id, response)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–µ–¥–∏–∞ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def clean_media_files(chat_id):
    # –û—á–∏—Å—Ç–∫–∞ –º–µ–¥–∏–∞ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞–ø–∫–µ
    media_dir = os.path.join(DATA_DIR, str(chat_id), 'media')
    voice_dir = os.path.join(DATA_DIR, str(chat_id), 'voice')
    music_dir = os.path.join(DATA_DIR, str(chat_id), 'music')  # –ü–∞–ø–∫–∞ –¥–ª—è –º—É–∑—ã–∫–∏

    # –û—á–∏—Å—Ç–∫–∞ –º–µ–¥–∏–∞ –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ø–∞–ø–∫–µ
    backup_media_dir = os.path.join(BACKUP_DIR, str(chat_id), 'media')
    backup_voice_dir = os.path.join(BACKUP_DIR, str(chat_id), 'voice')
    backup_music_dir = os.path.join(BACKUP_DIR, str(chat_id), 'music')  # –†–µ–∑–µ—Ä–≤–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –º—É–∑—ã–∫–∏

    # –£–¥–∞–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–æ–∫
    if os.path.exists(media_dir):
        shutil.rmtree(media_dir)
        os.makedirs(media_dir)  # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if os.path.exists(voice_dir):
        shutil.rmtree(voice_dir)
        os.makedirs(voice_dir)  # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if os.path.exists(music_dir):
        shutil.rmtree(music_dir)
        os.makedirs(music_dir)  # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if os.path.exists(backup_media_dir):
        shutil.rmtree(backup_media_dir)
        os.makedirs(backup_media_dir)  # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if os.path.exists(backup_voice_dir):
        shutil.rmtree(backup_voice_dir)
        os.makedirs(backup_voice_dir)  # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ
    if os.path.exists(backup_music_dir):
        shutil.rmtree(backup_music_dir)
        os.makedirs(backup_music_dir)  # –°–æ–∑–¥–∞–µ–º –∑–∞–Ω–æ–≤–æ

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
def console_input():
    while True:
        command = input()
        if command.startswith('/send '):
            message_text = command.replace('/send ', '')
            for chat_id in os.listdir(DATA_DIR):
                try:
                    chat_id_int = int(chat_id)
                    bot.send_message(chat_id_int, message_text)
                except ValueError:
                    continue
                except ApiTelegramException as e:
                    log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {chat_id_int}: {e}")

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞
threading.Thread(target=console_input, daemon=True).start()


@bot.message_handler(commands=['gent2'])
def generate_gent2_sentence(message):
    adj = random.choice(adjectives)
    verb = random.choice(verbs)

    adj_form = morph.parse(adj)[0]
    verb_form = morph.parse(verb)[0]

    #  –ü—Ä–æ—Å—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≤—Å–µ–≥–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π
    sentence = f"{adj_form.make_agree_with_number(1).word} {verb_form.make_agree_with_number(1).word}."
    bot.reply_to(message, sentence)


@bot.message_handler(commands=['gent2t'])
def generate_gent2t_sentence(message):
    adj = random.choice(adjectives)
    noun = "–±–∞–∑–∏"

    # Analyze the noun to get its grammatical features
    noun_parse = morph.parse(noun)[0]
    noun_gram = noun_parse.tag

    # Extract relevant grammatical features from noun_gram (case, number, gender)
    gram_info = {
        'case': noun_gram.case,
        'number': noun_gram.number,
        'gender': noun_gram.gender
    }

    # Analyze the adjective and inflect it to agree with the noun
    adj_parse = morph.parse(adj)[0]
    try:
        adj_form = adj_parse.inflect(gram_info).word
    except Exception as e:  # Handle potential inflection errors
        adj_form = adj  # Fallback to original adjective if inflection fails

    # Analyze the verb and inflect it to agree with the noun. Handle person separately.
    verb = random.choice(verbs)
    verb_parse = morph.parse(verb)[0]

    # Choose person (1st or 2nd) randomly
    person = random.choice([1, 2])  # 1 for I/we, 2 for you

    #  Inflect the verb.  Note that person is handled separately from the noun agreement.
    try:
        verb_form = verb_parse.inflect({gram_info['number'], 'VERB', f'pers={person}'}).word
    except Exception as e:
        verb_form = verb


    sentence = f"–£ {adj_form} {noun} {verb_form}."
    bot.reply_to(message, sentence)











# –ü–∞—Å—Ö–∞–ª–∫–∏
@bot.message_handler(commands=["baziVozmiPrimer"])
def vozmi_primer_message(message):
    bot.send_message(message.chat.id, "–°—ç—Ä, –≤–∑—è–ª, —Å—ç—Ä!")

@bot.message_handler(commands=["baziOtpustiPrimer"])
def otpusti_primer_message(message):
    bot.send_message(message.chat.id, "–£–∂–µ –æ—Ç–ø—É—Å—Ç–∏–ª, —Å—ç—Ä!")

@bot.message_handler(commands=["baziCyeshTapok"])
def cyesh_tapok_message(message):
    bot.send_message(message.chat.id, "–£–∂–µ –µ–º —Ç–∞–ø–æ–∫, —Å—ç—Ä... –Ω–æ —ç—Ç–æ —Ç–æ—á–Ω–æ –≤–∫—É—Å–Ω–µ–µ, —á–µ–º –≥–æ–≥–æ–ª—å-–º–æ–≥–æ–ª—å...")

@bot.message_handler(commands=['gena'])
def gena_message(message):
    bot.send_message(message.chat.id, "–í—ã –Ω–∞—à–ª–∏ –ø–∞—Å—Ö–∞–ª–∫—É —à–ª–µ–ø—ã –∫–ª–∞—Å–∏—á–µ—Å–∫–æ–≥–æ :)))) –∑–¥–µ—Å—å –æ–Ω –ø–æ—Å–µ–ª–µ–ª–∏—Å—è")

@bot.message_handler(commands=['effect'])
def effect_message(message):
    bot.send_message(message.chat.id, "–≠—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–µ –¥–∞–º")

@bot.message_handler(commands=["zapou"])
def zapou_message(message):
    chance = random.randint(1, 1000)
    if chance == 1:
        bot.reply_to(message, f'–í–´ –°–õ–û–í–ò–õ–ò –ó–ê–ü–û–ô –í–´ –í–ï–ó–£–ù–ß–ò–ö! {message.from_user.first_name} @{message.from_user.username} ')
    else:
        bot.reply_to(message, f'–í–´ –Ω–µ –°–õ–û–í–ò–õ–ò –ó–ê–ü–û–ô:( {message.from_user.first_name} @{message.from_user.username} ')

@bot.message_handler(commands=["zapou_code_10_arab"])
def zapou_code_10_arab_message(message):
    chance2 = random.randint(1, 10)
    if chance2 == 1:
        bot.reply_to(message, f'–í–´ –°–õ–û–í–ò–õ–ò –ó–ê–ü–û–ô –í–´ –í–ï–ó–£–ù–ß–ò–ö! {message.from_user.first_name} @{message.from_user.username} ')
    else:
        bot.reply_to(message, f'–í–´ –Ω–µ –°–õ–û–í–ò–õ–ò –ó–ê–ü–û–ô:( {message.from_user.first_name} @{message.from_user.username} ')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞
@bot.message_handler(commands=['poll'])
def create_poll(message):
    log("–ö–æ–º–∞–Ω–¥–∞ /poll –ø–æ–ª—É—á–µ–Ω–∞")
    chat_id = message.chat.id
    chat_data = load_chat_data(chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if chat_data.get('activity', 5) == 0:
        return

    user_input = message.text[len('/poll ' or '/poll@bazi_ai_bot '):].strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if user_input:
        question = user_input
        options = random.sample(chat_data['messages'], min(4, len(chat_data['messages'])))  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    else:
        if len(chat_data['messages']) < 2:
            bot.send_message(chat_id, "–ë–∞–∑–∞—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ–± —è –º–æ–≥ —Å–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫—É—á–Ω—ã–π –æ–ø—Ä–æ—Å.")
            return

        question = random.choice(chat_data['messages'])
        options = random.sample(chat_data['messages'], min(4, len(chat_data['messages'])))  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –≤–∞—Ä–∏–∞–Ω—Ç—ã

    try:
        bot.send_poll(chat_id, question, options, is_anonymous=random.choice([True, False]))
        log("–û–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except ApiTelegramException as e:
        log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /info
@bot.message_handler(commands=['info'])
def chat_info(message):
    chat_id = message.chat.id
    chat_data = load_chat_data(chat_id)
    num_chats = len(os.listdir(DATA_DIR))

    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–æ–ª–æ—Å–µ, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∞–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥–µ
    settings_path = os.path.join(DATA_DIR, str(chat_id), 'settings.json')
    voice = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    activity = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    restart_count = 0  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
    language = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —è–∑—ã–∫–∞
    auto_translate = "–≤—ã–∫–ª—é—á–µ–Ω"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –∞–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥–∞
    natural_language = "–≤—ã–∫–ª—é—á–µ–Ω"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞

    if os.path.exists(settings_path):
        with open(settings_path, 'r') as f:
            settings = json.load(f)
            voice = settings.get('voice', "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            activity = settings.get('activity', "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            restart_count = settings.get('restart_count', 0)  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
            language = settings.get('language', "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")  # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫
            auto_translate = "–≤–∫–ª—é—á–µ–Ω" if settings.get('auto_translate', False) else "–≤—ã–∫–ª—é—á–µ–Ω"  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥–∞
            natural_language = "–≤–∫–ª—é—á–µ–Ω" if settings.get('natural_language', False) else "–≤—ã–∫–ª—é—á–µ–Ω"  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –≥—Ä—É–ø–ø—ã –≤ —Ç–æ–ø–µ
    groups_data = {}
    for chat_folder in os.listdir(DATA_DIR):
        chat_path = os.path.join(DATA_DIR, chat_folder, 'data.json')
        if os.path.exists(chat_path):
            try:
                with open(chat_path, 'r', encoding='utf-8') as f:
                    chat_info = json.load(f)
                    group_name = chat_info.get('title', f"ID{chat_folder}")
                    message_count = len(chat_info.get('messages', []))
                    groups_data[group_name] = message_count
            except (json.JSONDecodeError, UnicodeDecodeError):
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
    sorted_groups = sorted(groups_data.items(), key=lambda x: x[1], reverse=True)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ –≥—Ä—É–ø–ø—ã
    group_place = next((index + 1 for index, (group, count) in enumerate(sorted_groups) if group == chat_data['title']), len(sorted_groups) + 1)

    info_message = (f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\n"
                    f"ID —á–∞—Ç–∞: {chat_id}\n"
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞: {chat_data['title']}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤: {num_chats}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —ç—Ç–æ–º —á–∞—Ç–µ: {len(chat_data['messages'])}\n"
                    f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {time.ctime(chat_data['last_message_sent']) if chat_data['last_message_sent'] else '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}\n"
                    f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–æ—Ç–∞: {activity}\n"
                    f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≥–æ–ª–æ—Å –±–æ—Ç–∞: {voice}\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ —Å–ª–æ–≤–∞—Ä—è: {restart_count}\n"
                    f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫: {language}\n"
                    f"–ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥: {auto_translate}\n"
                    f"–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫: {natural_language}\n"
                    f"–ú–µ—Å—Ç–æ –≥—Ä—É–ø–ø—ã –≤ —Ç–æ–ø–µ: {group_place} (–≤—Å–µ–≥–æ –≥—Ä—É–ø–ø: {len(groups_data)})")

    bot.send_message(chat_id, info_message)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(commands=['gent'])
def generate_message(message):
    chat_id = message.chat.id
    chat_data = load_chat_data(chat_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if chat_data.get('activity', 5) == 0:
        return

    user_input = message.text[len('/gent ' or '/gent@bazi_ai_bot '):].strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if user_input:
        response = generate_response({'messages': [user_input]})
    else:
        response = generate_response(chat_data)

    bot.send_message(chat_id, response)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(commands=['genv'])
def generate_voice(message):
    chat_id = message.chat.id
    chat_data = load_chat_data(chat_id)

    if chat_data.get('activity', 5) == 0:
        return

    user_input = message.text[len('/genv ' or '/genv@bazi_ai_bot '):].strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if user_input:
        response = generate_response({'messages': [user_input]})
    else:
        response = generate_response(chat_data)

    voice_file = generate_voice_message(response, chat_id)
    if voice_file is None:
        bot.send_message(chat_id, "–£–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫ –Ω–µ –¥—Ä—É–∂–∏—Ç —Å TTS. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —è–∑—ã–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä /voice ru.")
    else:
        with open(voice_file, 'rb') as f:
            bot.send_voice(chat_id, f)

@bot.message_handler(commands=['genm'])
def generate_media(message):
    chat_id = message.chat.id
    chat_data = load_chat_data(chat_id)

    if chat_data.get('activity', 5) == 0:
        return

    user_input = message.text[len('/genm ' or '/genm@bazi_ai_bot '):].strip()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    if user_input:
        response = generate_response({'messages': [user_input]})
    else:
        response = generate_response(chat_data)

    media_files = os.listdir(os.path.join(DATA_DIR, str(chat_id), 'media'))
    if media_files:
        selected_files = random.sample(media_files, min(len(media_files), 3))  # –í—ã–±–∏—Ä–∞–µ–º –¥–æ 3 –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
        for media_file in selected_files:
            media_path = os.path.join(DATA_DIR, str(chat_id), 'media', media_file)
            caption = response  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø–æ–¥–ø–∏—Å—å

            if media_file.endswith(('.jpg', '.png')):
                with open(media_path, 'rb') as f:
                    bot.send_photo(chat_id, f, caption=caption)
            elif media_file.endswith(('.mp4', '.avi')):
                with open(media_path, 'rb') as f:
                    bot.send_video(chat_id, f, caption=caption)
            elif media_file.endswith(('.ogg', '.mp3')):
                with open(media_path, 'rb') as f:
                    bot.send_audio(chat_id, f, caption=caption)
            else:
                with open(media_path, 'rb') as f:
                    bot.send_document(chat_id, f, caption=caption)
    else:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏, –Ω–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –ø–∞–ø–∫–µ —á–∞—Ç–∞ –≤ –º–æ–µ–π —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –º–µ–¥–∏–∞. –û—Ç–ø—Ä–∞–≤—å –∫–∞–∫–æ–µ-–Ω–∏–±—É–¥—å –º–µ–¥–∏–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ñ–æ—Ç–æ), —á—Ç–æ–±—ã —è —Å–º–æ–≥ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è :)")

# –ö–æ–º–∞–Ω–¥–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞
@bot.message_handler(commands=['rs'])
def random_sticker(message):
    chat_id = message.chat.id
    stickers_dir = os.path.join(DATA_DIR, str(chat_id), 'stickers')

    if os.path.exists(stickers_dir):
        sticker_files = [f for f in os.listdir(stickers_dir) if f.endswith('.webp')]
        if sticker_files:
            random_sticker_file = random.choice(sticker_files)
            sticker_path = os.path.join(stickers_dir, random_sticker_file)
            with open(sticker_path, 'rb') as f:
                bot.send_sticker(chat_id, f)
        else:
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤.")
    else:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∏–∫–µ—Ä–æ–≤.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
@bot.message_handler(commands=['activity'])
def set_activity(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    admins = bot.get_chat_administrators(chat_id)
    admin_ids = [admin.user.id for admin in admins]

    if user_id in admin_ids:
        try:
            activity = int(message.text.split()[1])
            if 0 <= activity <= 10:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª
                with open(os.path.join(DATA_DIR, str(chat_id), 'settings.json'), 'r+') as f:
                    settings = json.load(f)
                    settings['activity'] = activity
                    f.seek(0)
                    json.dump(settings, f, ensure_ascii=False, indent=4)
                    f.truncate()  # –û–±—Ä–µ–∑–∞–µ–º —Ñ–∞–π–ª –¥–æ –Ω–æ–≤–æ–π –¥–ª–∏–Ω—ã
                bot.send_message(chat_id, f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {activity}.")
            else:
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ç 0 –¥–æ 10.")
        except (IndexError, ValueError):
            bot.send_message(chat_id, "–ß—Ç–æ —ç—Ç–æ –∑–∞ —á–∏—Å–ª–æ —Ç–∞–∫–æ–µ?")
    else:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏, –Ω–æ —Ç—ã –º–∞–ª–æ–∞–¥–º–∏–Ω–µ–Ω –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã, —É—á–∞—Å—Ç–Ω–∏–∫.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞
@bot.message_handler(commands=['voice'])
def set_voice(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    admins = bot.get_chat_administrators(chat_id)
    admin_ids = [admin.user.id for admin in admins]

    if user_id in admin_ids:
        try:
            new_voice = message.text.split(maxsplit=1)[1]
            settings_path = os.path.join(DATA_DIR, str(chat_id), 'settings.json')

            if os.path.exists(settings_path):
                with open(settings_path, 'r+') as f:
                    settings = json.load(f)
                    settings['voice'] = new_voice
                    f.seek(0)
                    json.dump(settings, f, ensure_ascii=False, indent=4)
                    f.truncate()
            else:
                settings = {'voice': new_voice}
                with open(settings_path, 'w', encoding='utf-8') as f:
                    json.dump(settings, f, ensure_ascii=False, indent=4)

            bot.send_message(chat_id, f"–ì–æ–ª–æ—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_voice}'.")
        except IndexError:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ–ª–æ—Å–∞. –ù–∞–ø—Ä–∏–º–µ—Ä: 'ru' –∏–ª–∏ 'en'.")
        except ValueError as e:
            bot.send_message(chat_id, "–£–∫–∞–∑–∞–Ω–Ω—ã–π —è–∑—ã–∫ –Ω–µ –¥—Ä—É–∂–∏—Ç —Å TTS. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —è–∑—ã–∫, –Ω–∞–ø—Ä–∏–º–µ—Ä /voice ru.")
            log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞: {e}")
    else:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏, –Ω–æ —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞
@bot.message_handler(commands=['lang'])
def set_language(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    admins = bot.get_chat_administrators(chat_id)
    admin_ids = [admin.user.id for admin in admins]

    if user_id in admin_ids:
        try:
            new_language = message.text.split()[1]
            settings_path = os.path.join(DATA_DIR, str(chat_id), 'settings.json')

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if os.path.exists(settings_path):
                with open(settings_path, 'r+') as f:
                    settings = json.load(f)
                    settings['language'] = new_language  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π —è–∑—ã–∫
                    f.seek(0)
                    json.dump(settings, f, ensure_ascii=False, indent=4)
                    f.truncate()  # –û–±—Ä–µ–∑–∞–µ–º —Ñ–∞–π–ª –¥–æ –Ω–æ–≤–æ–π –¥–ª–∏–Ω—ã
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
                settings = {
                    "activity": 5,
                    "voice": "ru",
                    "restart_count": 0,
                    "language": new_language,  # –£—Å—Ç–∞–Ω–æ–≤–∏–º —è–∑—ã–∫
                    "auto_translate": False  # –ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                }
                with open(settings_path, 'w', encoding='utf-8') as f:
                    json.dump(settings, f, ensure_ascii=False, indent=4)

            bot.send_message(chat_id, f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_language}'.")
        except IndexError:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —è–∑—ã–∫. –ù–∞–ø—Ä–∏–º–µ—Ä: /lang en.")
    else:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
@bot.message_handler(commands=['tl'])
def translate_text(message):
    chat_id = message.chat.id
    text_to_translate = message.text[len('/tl '):].strip()

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ settings.json
    settings_path = os.path.join(DATA_DIR, str(chat_id), 'settings.json')
    if os.path.exists(settings_path):
        with open(settings_path, 'r', encoding='utf-8') as f:
            settings = json.load(f)
            target_language = settings.get('language', 'en')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    else:
        target_language = 'en'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞
    detected_language = translator.detect(text_to_translate)
    detected_language_lang = detected_language.lang  # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ, –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    if detected_language_lang == target_language:
        target_language = 'en' if target_language != 'en' else 'ru'

    translated_text = translator.translate(text_to_translate, dest=target_language).text  # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–µ–∫—Å—Ç
    bot.send_message(chat_id, translated_text)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥–∞
@bot.message_handler(commands=['autotl'])
def toggle_auto_translate(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    admins = bot.get_chat_administrators(chat_id)
    admin_ids = [admin.user.id for admin in admins]

    if user_id in admin_ids:
        command = message.text.split()[1].lower()
        settings_path = os.path.join(DATA_DIR, str(chat_id), 'settings.json')
        if os.path.exists(settings_path):
            with open(settings_path, 'r+') as f:
                settings = json.load(f)
                settings['auto_translate'] = (command in ['on', '1'])
                f.seek(0)
                json.dump(settings, f, ensure_ascii=False, indent=4)
                f.truncate()  # –û–±—Ä–µ–∑–∞–µ–º —Ñ–∞–π–ª –¥–æ –Ω–æ–≤–æ–π –¥–ª–∏–Ω—ã
        else:
            settings = {'auto_translate': (command in ['on', '1'])}
            with open(settings_path, 'w', encoding='utf-8') as f:
                json.dump(settings, f, ensure_ascii=False, indent=4)

        if command in ['on', '1']:
            bot.send_message(chat_id, "–ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω.")
        elif command in ['off', '0']:
            bot.send_message(chat_id, "–ê–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω.")
        else:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'on' –∏–ª–∏ 'off'.")
    else:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
@bot.message_handler(commands=['natural'])
def set_natural_language(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    admins = bot.get_chat_administrators(chat_id)
    admin_ids = [admin.user.id for admin in admins]

    if user_id in admin_ids:
        try:
            command = message.text.split()[1].lower()
            settings_path = os.path.join(DATA_DIR, str(chat_id), 'settings.json')

            if os.path.exists(settings_path):
                with open(settings_path, 'r+') as f:
                    settings = json.load(f)
                    settings['natural_language'] = (command in ['on', '1'])
                    f.seek(0)
                    json.dump(settings, f, ensure_ascii=False, indent=4)
                    f.truncate()  # –û–±—Ä–µ–∑–∞–µ–º —Ñ–∞–π–ª –¥–æ –Ω–æ–≤–æ–π –¥–ª–∏–Ω—ã
            else:
                settings = {'natural_language': (command in ['on', '1'])}
                with open(settings_path, 'w', encoding='utf-8') as f:
                    json.dump(settings, f, ensure_ascii=False, indent=4)

            if command in ['on', '1']:
                bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞.")
            elif command in ['off', '0']:
                bot.send_message(chat_id, "–§—É–Ω–∫—Ü–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞.")
            else:
                bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'on' –∏–ª–∏ 'off'.")
        except IndexError:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ 'on' –∏–ª–∏ 'off'.")
    else:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–ª–æ–≤–∞—Ä—è —á–∞—Ç–∞
@bot.message_handler(commands=['cm'])
def clear_memory(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    admins = bot.get_chat_administrators(chat_id)
    admin_ids = [admin.user.id for admin in admins]

    if user_id in admin_ids:
        if len(message.text.split()) == 2 and message.text.split()[1].lower() == 'true':
            chat_dir = os.path.join(DATA_DIR, str(chat_id))
            data_file_path = os.path.join(chat_dir, 'data.json')

            if os.path.exists(data_file_path):
                # –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                with open(data_file_path, 'w', encoding='utf-8') as f:
                    json.dump({'messages': [], 'last_active': time.time(), 'active_count': 0, 'last_message_sent': 0}, f, ensure_ascii=False, indent=4)

                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
                settings_path = os.path.join(chat_dir, 'settings.json')
                if os.path.exists(settings_path):
                    with open(settings_path, 'r+') as f:
                        settings = json.load(f)
                        settings['restart_count'] = settings.get('restart_count', 0) + 1
                        f.seek(0)
                        json.dump(settings, f, ensure_ascii=False, indent=4)
                        f.truncate()

                bot.send_message(chat_id, "–ü–∞–º—è—Ç—å –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
            else:
                bot.send_message(chat_id, "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            bot.send_message(chat_id, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /cm true")
    else:
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-–ª–∏—Å—Ç–∞ 10 –≥—Ä—É–ø–ø –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º
@bot.message_handler(commands=['top'])
def top_groups(message):
    chat_id = message.chat.id
    groups_data = {}

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º –≤ DATA_DIR
    for chat_folder in os.listdir(DATA_DIR):
        chat_path = os.path.join(DATA_DIR, chat_folder, 'data.json')
        if os.path.exists(chat_path):
            try:
                with open(chat_path, 'r', encoding='utf-8') as f:
                    chat_data = json.load(f)
                    group_name = chat_data.get('title', f"ID{chat_folder}")  # –ò—Å–ø–æ–ª—å–∑—É–µ–º title –∏–ª–∏ ID –∫–∞–∫ –∏–º—è –≥—Ä—É–ø–ø—ã
                    message_count = len(chat_data.get('messages', []))  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                    groups_data[group_name] = message_count  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä–µ
            except (json.JSONDecodeError, UnicodeDecodeError):
                log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {chat_path}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
    sorted_groups = sorted(groups_data.items(), key=lambda x: x[1], reverse=True)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    if not sorted_groups:
        bot.send_message(chat_id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    top_list = "–¢–æ–ø 10 –≥—Ä—É–ø–ø –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π:\n"
    for index, (group, count) in enumerate(sorted_groups[:10], start=1):
        if index == 1:
            top_list += f"ü•á {group}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        elif index == 2:
            top_list += f"ü•à {group}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        elif index == 3:
            top_list += f"ü•â {group}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        else:
            top_list += f"üèÖ {group}: {count} —Å–æ–æ–±—â–µ–Ω–∏–π\n"

    bot.send_message(chat_id, top_list)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    chat_data = load_chat_data(chat_id)

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –±–æ—Ç–æ–º
    if message.from_user.id == bot.get_me().id:
        return

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.startswith('/'):
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ settings.json
    settings_path = os.path.join(DATA_DIR, str(chat_id), 'settings.json')
    if os.path.exists(settings_path):
        with open(settings_path, 'r', encoding='utf-8') as f:
            settings = json.load(f)
            target_language = settings.get('language', 'ru')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
            auto_translate = settings.get('auto_translate', False)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥
            natural_language = settings.get('natural_language', False)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫
            activity_level = settings.get('activity', 5)  # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5)
    else:
        target_language = 'ru'
        auto_translate = False
        natural_language = False
        activity_level = 5  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if activity_level == 0:
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å
    chat_data['messages'].append(message.text)
    chat_data['last_active'] = time.time()
    chat_data['last_message_sent'] = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    #  –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if time.time() - chat_data['last_message_sent'] > 120:
        chat_data['active_count'] += 1

    save_chat_data(chat_id, chat_data)

    # –ï—Å–ª–∏ –∞–≤—Ç–æ-–ø–µ—Ä–µ–≤–æ–¥ –≤–∫–ª—é—á–µ–Ω
    if auto_translate:
        detected_language = translator.detect(message.text).lang
        if detected_language != target_language:
            translated_text = translator.translate(message.text, dest=target_language).text
            user_name = message.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            bot.send_message(chat_id, f"{user_name}: {translated_text}")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
    response = None
    send_probability = activity_level / 100 # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç 0 –¥–æ 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    if chat_data['active_count'] >= 25 and random.random() < send_probability:
        response = generate_response(chat_data)

        # 10% —à–∞–Ω—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ
        if random.random() < 0.10:
            voice_file = generate_voice_message(response, chat_id)
            if voice_file is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
                with open(voice_file, 'rb') as f:
                    bot.send_voice(chat_id, f)
            return  # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –≠—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
        bot.send_chat_action(chat_id, 'typing')
        time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –ø–µ—á–∞—Ç–∏
        bot.send_message(chat_id, response)
        chat_data['last_message_sent'] = time.time()  # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π
    if random.random() < send_probability:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π
        media_files = os.listdir(os.path.join(DATA_DIR, str(chat_id), 'media'))
        if media_files:
            random_media_file = random.choice(media_files)
            media_path = os.path.join(DATA_DIR, str(chat_id), 'media', random_media_file)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            caption = generate_response(chat_data)
            if random_media_file.endswith(('.jpg', '.png')):
                with open(media_path, 'rb') as f:
                    bot.send_photo(chat_id, f, caption=caption)
            elif random_media_file.endswith(('.mp4', '.avi')):
                with open(media_path, 'rb') as f:
                    bot.send_video(chat_id, f, caption=caption)
            elif random_media_file.endswith(('.ogg', '.mp3')):
                with open(media_path, 'rb') as f:
                    bot.send_audio(chat_id, f, caption=caption)
            else:
                with open(media_path, 'rb') as f:
                    bot.send_document(chat_id, f, caption=caption)

    # –õ–æ–≥–∏–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if random.random() < send_probability:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∞–∫—Ü–∏–∏
        reactions_file = os.path.join(DATA_DIR, str(chat_id), 'reactions.json')
        if os.path.exists(reactions_file):
            with open(reactions_file, 'r', encoding='utf-8') as f:
                reactions = json.load(f)
            if reactions:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ä–µ–∞–∫—Ü–∏–∏
                reaction = random.choice(reactions)
                # –°—Ç–∞–≤–∏–º —Ä–µ–∞–∫—Ü–∏—é –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                bot.send_chat_action(chat_id, 'typing')
                time.sleep(2)  # –≠—Ñ—Ñ–µ–∫—Ç "–≤—ã–±–∏—Ä–∞–µ—Ç —Ä–µ–∞–∫—Ü–∏—é"
                bot.send_message(chat_id, reaction)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
def periodic_cleanup(chat_id):
    clean_media_files(chat_id)
    Timer(21600, periodic_cleanup, args=[chat_id]).start()  # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 6 —á–∞—Å–æ–≤

# –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
def start_periodic_cleanups():
    for chat_id in os.listdir(DATA_DIR):
        try:
            periodic_cleanup(int(chat_id))  # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        except ValueError:
            continue  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ i



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    start_periodic_cleanups()  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É
    bot.infinity_polling(none_stop=True)
